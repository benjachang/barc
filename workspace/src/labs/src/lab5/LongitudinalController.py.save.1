#!/usr/bin/env python

from rospy import init_node, Subscriber, Publisher, get_param
from rospy import Rate, is_shutdown, ROSInterruptException, spin, on_shutdown
import rospy
import time
from barc.msg import ECU, Encoder
from numpy import pi

# from encoder
v_meas      = 0.0
ang_km1     = 0.0
ang_km2     = 0.0
n_FL        = 0.0
n_FR        = 0.0
t0          = time.time()
r_tire      = 0.05 # radius of the tire
servo_pwm   = 1520.0
motor_pwm   = 1500.0
motor_pwm_offset = 1500.0

# reference speed
v_ref = 0.6 # give reference speed is 0.5 m/s

# ===================================PID longitudinal controller================================#
class PID():
    def __init__(self, kp=1, ki=1, kd=1, integrator=0, derivator=0):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.integrator = integrator
        self.derivator = derivator
        self.integrator_max = 10
        self.integrator_min = -10

    def acc_calculate(self, speed_reference, speed_current):
        self.error = speed_reference - speed_current

        # Propotional control
     
   self.P_effect = self.kp*self.error

        # Integral control
        self.integrator = self.integrator + self.error
        ## Anti windup
        if self.integrator >= self.integrator_max:
            self.integrator = self.integrator_max
        if self.integrator <= self.integrator_min:
            self.integrator = self.integrator_min
        self.I_effect = self.ki*self.integrator

        # Derivative control
        self.derivator = self.error - self.derivator
        self.D_effect = self.kd*self.derivator
        self.derivator = self.error

        acc = self.P_effect + self.I_effect + self.D_effect
        if acc <= 0:
            acc = 20
        return acc

# =====================================end of the controller====================================#

# encoder measurement update
def encoder_callback(data):
    global t0, v_meas
    global n_FL, n_FR
    global ang_km1, ang_km2

    n_FL = data.FL
    n_FR = data.FR
    n_mean = (n_FL)
    ang_mean = n_mean*2*pi*8

    tf = time.time()
    dt = tf - t0
    v_meas = r_tire*(3*ang_mean - 4*ang_km1 + ang_km2)/(2*dt)
    #rospy.logwarn("speed = {}".format(v_meas))

    ang_km1 = ang_mean
    ang_km2 = ang_km1
    t0 = time.time()


# state estimation node
def controller():
    global motor_pwm, servo_pwm, motor_pwm_offset
    global v_ref, v_meas

    # Initialize node:
    rospy.init_node('simulationGain', anonymous=True)

    # Add your necessary topic subscriptions / publications, depending on your preferred method of velocity estimation
    ecu_pub   = rospy.Publisher('ecu_pwm', ECU, queue_size = 10)
    rospy.Subscriber('encoder', Encoder, encoder_callback)

    # Set node rate
    loop_rate   = 50
    rate        = rospy.Rate(loop_rate)

    # Initialize your PID controller here, with your chosen PI gains
    PID_control = PID(kp = 15, ki = 0, kd = 0)

    while not rospy.is_shutdown():
        # calculate acceleration from PID controller.
        motor_pwm = PID_control.acc_calculate(v_ref, v_meas) + motor_pwm_offset

        # publish control command
        ecu_pub.publish( ECU(motor_pwm, servo_pwm) )

        # wait
        rate.sleep()

if __name__ == '__main__':
    try:
       controller()
    except rospy.ROSInterruptException:
        pass
